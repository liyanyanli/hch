package api

import (
	"bufio"
	"net/http"
	"strings"

	"github.com/vmware/harbor/dao"
	"github.com/vmware/harbor/utils/log"
)

//gai
//type vulnerabilityStatus struct {
//	Success           string            `json:"success"`
//	VulnerabilityInfo vulnerabilityInfo `json:"vulnerability"`
//	Unsupport         string            `json:"unsupport"`
//	Abnormal          string            `json:"others"`
//}

type vulnerabilityStatusSuccess struct {
	Success string `json:"success"`
}

type vulnerabilityStatusInfo struct {
	VulnerabilityInfo vulnerabilityInfo `json:"vulnerability"`
}

type vulnerabilityStatusNotSupport struct {
	Unsupport string `json:"notsupport"`
}

type vulnerabilityStatusAbnormal struct {
	Abnormal string `json:"abnormal"`
}

type vulnerabilityInfo struct {
	VulnerabilitySumInfo vulnerabilitySumInfo `json:"vulnerability-suminfo"`
	VulnerabilityList    []vulnerabilityList  `json:"vulnerability-list"`
}

type vulnerabilitySumInfo struct {
	VulnerabilitySum        int `json:"vulnerability-sum"`
	VulnerabilityPatchesSum int `json:"vulnerability-patches-sum"`
	CriticalLevel           int `json:"critical-level-sum"`
	HighLevel               int `json:"high-level-sum"`
	MediumLevel             int `json:"medium-level-sum"`
	LowLevel                int `json:"low-level-sum"`
	NegligibleLevel         int `json:"negligible-level"`
	UnknownLevel            int `json:"unknown-level"`
}

type vulnerabilityList struct {
	CVEName        string `json:"CVE"`
	Severity       string `json:"severity"`
	Describe       string `json:"description"`
	Package        string `json:"package"`
	CurrentVersion string `json:"current-version"`
	FixedVersion   string `json:"fixed-in-version"`
	CVELink        string `json:"CVE-link"`
	ImageLayer     string `json:"image-layer"`
}

func cleanVL() (vl vulnerabilityList) {
	return vulnerabilityList{}
}

func (ra *RepositoryAPI) GetVulnerabilitySummary() {
	ra.ValidateUser()
	const SUCCESS = `Success! There is no vulnerabilities has been detected in your image!`
	const UNSUPPORT = `NOTE: No features have been detected in the image. This usually means that the image isn't supported by Clair.`
	var abnormal string
	repoName := ra.GetString("repo_name")

	if len(repoName) == 0 {
		ra.CustomAbort(http.StatusBadRequest, "repoName is nil")
	}

	clair_result, err := dao.GetClairResultByRepoName(repoName)
	if err != nil {
		log.Errorf("error happens when get repositoryname from sql: %v", err)
		abnormal = `Error happens when get info from databases!`
	}
	str := string(clair_result)
	if str == "" {
		log.Errorf("ERROR Message: the clair result is none!")
		abnormal = `The scan result for this image is empty!`
	}

	//var vs vulnerabilityStatus

	var vss vulnerabilityStatusSuccess
	var vsi vulnerabilityStatusInfo
	var vsn vulnerabilityStatusNotSupport
	var vsa vulnerabilityStatusAbnormal

	vl := vulnerabilityList{}

	// Image has no Vulnerability.
	//if strings.Contains(str, "Success! No vulnerabilities were detected in your image") {
	if strings.Contains(str, "Success!") ||strings.Contains(str, "No vulnerabilities")  {
		log.Debug("the result from clair is success")
		vss.Success = SUCCESS

		ra.Data["json"] = vss
		ra.ServeJSON()
		return
	}

	// The image isn't supported by Clair.
	//if strings.Contains(str, "NOTE: No features have been detected in the image.") {
	if strings.Contains(str, "the image isn't supported by Clair") {
		log.Debug("the image isn't supported by Clair")
		vsn.Unsupport = UNSUPPORT
		ra.Data["json"] = vsn
		ra.ServeJSON()
		return
	}

	//The image is not safe and has some Vulnerabilities.
	if strings.Contains(str, "CVE-") || strings.Contains(str, "RHSA-") {
		log.Debug("Analyzing CVE !")
		scanner := bufio.NewScanner(strings.NewReader(str))
		if err := scanner.Err(); err != nil {
			log.Errorf("reading standard input: %s", err)
			ra.CustomAbort(http.StatusInternalServerError, "")
		}

		for scanner.Scan() {
			line := scanner.Text()
			if line == "" {
				continue
			}

			if (strings.HasPrefix(line, "CVE-") || strings.HasPrefix(line, "RHSA-"))&& strings.Contains(line, "(") {
				if vl.CVEName != "" && vl.Severity != "" {
					vsi.VulnerabilityInfo.VulnerabilityList = append(vsi.VulnerabilityInfo.VulnerabilityList, vl)
					vl = cleanVL()
				}

				vl.CVEName = strings.Split(line, " ")[0]
				ser := strings.Split(line, " ")[1]
				vl.Severity = ser[1 : len(ser)-1]

				// []vulnerabilitySumInfo 计数
				vsi.VulnerabilityInfo.VulnerabilitySumInfo.VulnerabilitySum++

				if strings.Contains(line, "High") {
					vsi.VulnerabilityInfo.VulnerabilitySumInfo.HighLevel++
				}else if strings.Contains(line, "Critical") {
					vsi.VulnerabilityInfo.VulnerabilitySumInfo.CriticalLevel++
				}  else if strings.Contains(line, "Medium") {
					vsi.VulnerabilityInfo.VulnerabilitySumInfo.MediumLevel++
				} else if strings.Contains(line, "Low") {
					vsi.VulnerabilityInfo.VulnerabilitySumInfo.LowLevel++
				} else if strings.Contains(line, "Negligible") {
					vsi.VulnerabilityInfo.VulnerabilitySumInfo.NegligibleLevel++
				} else {
					vsi.VulnerabilityInfo.VulnerabilitySumInfo.UnknownLevel++
				}
			} else if strings.HasPrefix(line, "	Package") {
				line = strings.Replace(line, " ", "", -1)
				line = strings.Replace(line, "	", "", -1)

				vl.Package = strings.Split(strings.Split(line, ":")[1], "@")[0]
				vl.CurrentVersion = strings.Split(strings.Split(line, ":")[1], "@")[1]
			} else if strings.HasPrefix(line, "	Link") {
				line = strings.Replace(line, " ", "", -1)
				line = strings.Replace(line, "	", "", -1)

				vl.CVELink = line[5:]
			} else if strings.HasPrefix(line, "	Fixed version") {
				line = strings.Replace(line, " ", "", -1)
				line = strings.Replace(line, "	", "", -1)

				vsi.VulnerabilityInfo.VulnerabilitySumInfo.VulnerabilityPatchesSum++
				vl.FixedVersion = strings.TrimSpace(line[strings.Index(line,":") + 1:])
			} else if strings.HasPrefix(line, "	Layer") {
				line = strings.Replace(line, " ", "", -1)
				line = strings.Replace(line, "	", "", -1)

				vl.ImageLayer = strings.Split(line, ":")[1]
			} else {
				line = strings.Replace(line, "	", "", -1)
				line = strings.Replace(line, "\n", "", -1)
				vl.Describe += line + " "
			}
		}
		vsi.VulnerabilityInfo.VulnerabilityList = append(vsi.VulnerabilityInfo.VulnerabilityList, vl)

		ra.Data["json"] = vsi
		ra.ServeJSON()
	}

	// Error in parsing clair_result
	if vss.Success == "" && vsn.Unsupport == "" && vsi.VulnerabilityInfo.VulnerabilitySumInfo.VulnerabilitySum == 0 {
		log.Debug("the result from clair is abnormal")
		vsa.Abnormal = abnormal

		ra.Data["json"] = vsa
		ra.ServeJSON()

		return
	}
}
